
import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.util.AttributeSet
import android.view.MotionEvent
import android.view.SurfaceHolder
import android.view.SurfaceView
import kotlin.random.Random

class GameView(context: Context, attrs: AttributeSet? = null) : SurfaceView(context, attrs), SurfaceHolder.Callback {
    private val backgroundBitmap: Bitmap = BitmapFactory.decodeResource(resources, R.drawable.galaxy_background)
    private var backgroundScaledBitmap: Bitmap? = null
    private val thread: GameThread
    private val firingObjects = mutableListOf<FiringObject>()
    private val opponents = mutableListOf<Opponent>()
    private var score: Int = 0
    private var gameOver: Boolean = false


    private var opponentBaseSpeed = 5f
    private var firingObjectBaseSpeed = 20f

    private val scorePaint: Paint = Paint().apply {
        color = Color.WHITE
        textSize = 50f
    }

    private val gameOverPaint: Paint = Paint().apply {
        color = Color.RED
        textSize = 100f
    }

    // Убедитесь, что не добавлен пустой список растровых изображений противника bitmaps
    private val opponentBitmaps: List<Bitmap> = listOf(
        BitmapFactory.decodeResource(resources, R.drawable.rocket),
        BitmapFactory.decodeResource(resources, R.drawable.rocket_2),
        BitmapFactory.decodeResource(resources, R.drawable.alian)
        // Add more images as needed
    ).filterNotNull() // Убедитесь, что не добавлены пустые растровые изображения

    init {
        holder.addCallback(this)
        thread = GameThread(holder, this)
    }

    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {
        backgroundScaledBitmap = Bitmap.createScaledBitmap(backgroundBitmap, width, height, true)
    }

    override fun surfaceDestroyed(holder: SurfaceHolder) {
        var retry = true
        thread.running = false
        while (retry) {
            try {
                thread.join()
                retry = false
            } catch (e: InterruptedException) {
                e.printStackTrace()
            }
        }
    }

    override fun surfaceCreated(holder: SurfaceHolder) {
        thread.running = true
        thread.start()
    }

    @Synchronized
    fun update() {
        if (gameOver) return

        // Еще больше уменьшите скорость увеличения скорости
        opponentBaseSpeed += score * 0.0001f
        firingObjectBaseSpeed += score * 0.0005f

        // Ограничьте максимальную скорость (опционально)
        val maxSpeed = 15f
        if (opponentBaseSpeed > maxSpeed) {
            opponentBaseSpeed = maxSpeed
        }
        if (firingObjectBaseSpeed > maxSpeed) {
            firingObjectBaseSpeed = maxSpeed
        }

        firingObjects.forEach { it.update() }
        firingObjects.removeAll { it.isOffScreen(height) }

        opponents.forEach { it.update() }
        opponents.removeAll { it.isOffScreen(height) }

        val firingObjectsCopy = ArrayList(firingObjects)
        val opponentsCopy = ArrayList(opponents)

        for (firingObject in firingObjectsCopy) {
            for (opponent in opponentsCopy) {
                if (firingObject.rect.intersect(opponent.getRect())) {
                    firingObjects.remove(firingObject)
                    opponents.remove(opponent)
                    score += 10
                    break
                }
            }
        }

        for (opponent in opponents) {
            if (opponent.y + opponent.height >= height - 100) {
                gameOver = true
                break
            }
        }

        if (Random.nextFloat() < 0.02) {
            val randomBitmap = opponentBitmaps.randomOrNull()
            if (randomBitmap != null) {
                // Resize the bitmap if needed
                val resizedBitmap = Bitmap.createScaledBitmap(randomBitmap, 100, 100, false)
                val opponent = Opponent(Random.nextFloat() * (width - 80), -80f, opponentBaseSpeed, resizedBitmap)
                opponents.add(opponent)
            }
        }
    }

    @Synchronized
    override fun draw(canvas: Canvas) {
        super.draw(canvas)
        drawBackground(canvas)

        // Создавайте собственные изображения для противников
        opponents.forEach { it.draw(canvas) }

        // Рисуйте другие элементы, такие как стреляющие объекты, и набирайте очки
        firingObjects.forEach { it.draw(canvas) }
        canvas.drawText("Счёт: $score", 50f, 100f, scorePaint)

        if (gameOver) {
            canvas.drawText("Игра окончена", width / 2f - 200f, height / 2f, gameOverPaint)
        }
    }

    private fun drawBackground(canvas: Canvas) {
        backgroundScaledBitmap?.let {
            canvas.drawBitmap(it, 0f, 0f, null)
        }
    }

    override fun onTouchEvent(event: MotionEvent): Boolean {
        if (gameOver) {
            if (event.action == MotionEvent.ACTION_DOWN) {
                resetGame()
                return true
            }
            return super.onTouchEvent(event)
        }

        if (event.action == MotionEvent.ACTION_DOWN) {
            val firingObject = FiringObject(event.x, height - 100f, firingObjectBaseSpeed)
            synchronized(this) {
                firingObjects.add(firingObject)
            }
            return true
        }
        return super.onTouchEvent(event)
    }

    private fun resetGame() {
        score = 0
        opponentBaseSpeed = 5f
        firingObjectBaseSpeed = 20f
        synchronized(this) {
            firingObjects.clear()
            opponents.clear()
        }
        gameOver = false
    }
}
